import React, {useState} from 'react';
import styled from 'styled-components';
import Banner from '../component/Banner';
import SearchBar from '../component/SearchBar';
import FileDropIn from '../component/FildDropIn';
import InputField from '../component/InputField';
import InputFields from '../component/InputFields';
import CodeEditor from '../component/CodeEditor';
import Button from '../component/StyledButton';
import ToggleSwitch from '../component/ToggleSwitch';

import InputFieldsFake from '../component/InputFieldsFake';


const ToggleSwitchContainer = styled.div`
  display: flex;
  justify-content: flex-end;
  margin-right: 20px;
`;

const Script = () => {
  const [showCodeEditor, setShowCodeEditor] = useState(false);
  const [typeVar1_mat, setTypeVar1_mat] = useState("10");
  const [typeVar2_mat, setTypeVar2_mat] = useState("12");
  const [typeVar3_mat, setTypeVar3_mat] = useState("13");
  const [typeVar4_mat, setTypeVar4_mat] = useState("14");
  const [typeVar5_mat, setTypeVar5_mat] = useState("15");
  const [typeVar6_mat, setTypeVar6_mat] = useState("16");
  const [typeVar7_mat, setTypeVar7_mat] = useState("17");

  const createAndDownloadCSV = () => {
    const filename = 'visualization_params.csv';
    const values = [typeVar1_mat, typeVar2_mat, typeVar3_mat, typeVar4_mat, typeVar5_mat, typeVar6_mat];
    const headers = ["Variable1", "Variable2", "Variable3", "Variable4", "Variable5", "Variable6"];
    let csvContent = "data:text/csv;charset=utf-8,";

    // Add headers
    csvContent += headers.join(",") + "\r\n";

    // Add the values
    csvContent += values.join(",") + "\r\n";

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', filename);
    document.body.appendChild(link); // Required for FF

    link.click(); // This will download the CSV file
    document.body.removeChild(link); // Clean up
    filename = 'visualization_params.jl';

    const varNames = ["var1", "var2", "var3", "var4", "var5", "var6"];
    let juliaContent = "## Julia variable assignments generated by Visualization app\n";

    // Add the variable assignments
    varNames.forEach((name, index) => {
      juliaContent += `const ${name} = ${JSON.stringify(values[index])}\n`;
    });

    const blob = new Blob([juliaContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);

    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    document.body.appendChild(link);

    link.click(); // This will download the .jl file
    document.body.removeChild(link); // Clean up
    URL.revokeObjectURL(url); // Free up memory - Important when handling blobs
  }

  // In your Script component

const updateVariable = (varName, value) => {
  console.log("updatevar test", varName, value)
  switch(varName) {
    case 'typeVar1_mat':
      setTypeVar1_mat(value);
      break;
    case 'typeVar2_mat':
      setTypeVar2_mat(value);
      break;
    case 'typeVar3_mat':
      setTypeVar3_mat(value);
      break;
    case 'typeVar4_mat':
      setTypeVar4_mat(value);
      break;
    case 'typeVar5_mat':
        setTypeVar5_mat(value);
        break;
    case 'typeVar6_mat':
      setTypeVar6_mat(value);
      break;
    case 'typeVar7_mat':
      setTypeVar7_mat(value);
      break;
    default:
      console.warn(`No handler for ${varName}`);
  }
}


  const handleValuesChange = (index, value) => {
    console.log("index", index, "vql", value)
    // if(index === 0){
    //   console.log("ich war hier")
    //   setTypeVar1_mat(value)
    // }
    switch(index) {
      case 0:
        setTypeVar1_mat(value)
        break;
      case 1: 
        
        setTypeVar2_mat(value);
        break;
      case 2:
        setTypeVar3_mat(value);
        break;
      case 3:
        setTypeVar4_mat(value);
        break;
      case 4:
        setTypeVar5_mat(value);
        break;
      case 5:
        setTypeVar6_mat(value);
        break;
      case 6:
        setTypeVar7_mat(value);
        break;
      default:
        console.warn(`Unhandled field index: ${index}`);
    }
  }


  return (
    <div className="visualization">
      
      <h1>Input your parameters to get a Julia Script ðŸ§®</h1>
      <FileDropIn/>
      <ToggleSwitchContainer>
        <ToggleSwitch onSwitch={setShowCodeEditor} />
      </ToggleSwitchContainer>
      {showCodeEditor ? (
        <>
          <h2>Code Editor</h2>
          <CodeEditor
            updateVariable={updateVariable} 
            typeVar1_mat={typeVar1_mat} 
            typeVar2_mat={typeVar2_mat} 
            typeVar3_mat={typeVar3_mat} 
            typeVar4_mat={typeVar4_mat} 
            typeVar5_mat={typeVar5_mat} 
            typeVar6_mat={typeVar6_mat} 
            typeVar7_mat={typeVar7_mat} 
            
          />
        </>
      ) : (
        <>

          <InputFields onValuesChange={handleValuesChange} values={[typeVar1_mat, typeVar2_mat, typeVar3_mat, typeVar4_mat, typeVar5_mat, typeVar6_mat, typeVar7_mat]} />
 
        </>
      )}
  
  <Button heading={"Start Export"} onClick={createAndDownloadCSV} />

    </div>


  );
};

export default Script;